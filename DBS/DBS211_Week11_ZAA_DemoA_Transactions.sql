/* **********
AUTHOR: Clint MacDonald 100######
DATE: March 28, 2022
TITLE: Week 11
DESCRIPTION: TCL Basics and Transactions
*/

-- Transactions made up of multiple DML statements to complete a single task
-- Typically transactions are EVERYTHING succeeds or NOTHING happens.

-- let us create a couple tables to use for examples

CREATE TABLE w11Transactions (
    transID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    amount NUMBER(10,2) NOT NULL,
    transDate DATE NOT NULL,
    accountID INT NOT NULL
    );

CREATE TABLE w11Accounts (
    accountID INT PRIMARY KEY,
    custID NUMBER(15),
    accountType CHAR(1) CHECK (accountType IN ('S','C','R')),
    balance NUMBER(11,2) DEFAULT 0.0
);

ALTER TABLE w11Transactions
    ADD CONSTRAINT trans_acct_fk FOREIGN KEY (accountID) 
        REFERENCES w11Accounts(accountID);
        
INSERT INTO w11Accounts VALUES (1, 123, 'C', 3456.99);
INSERT INTO w11Accounts VALUES (2, 123, 'S', 4847.25);

SELECT * FROM w11Accounts;

COMMIT;

-- now let us do a transfer of 1000 from Savings to Chequings

INSERT INTO w11Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w11Accounts SET balance = balance - 1000 WHERE accountID = 2;
INSERT INTO w11Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w11Accounts SET balance = balance + 1000 WHERE accountID = 1;

COMMIT;

SELECT * FROM w11Transactions;
SELECT * FROM w11Accounts;

-- Transactions have both a start and an end.
-- A transaction automatically ends when a new one starts
-- when a transaction auto ends, it is automatically commited.

-- There are 3 or 4 ways to START a new transaction
-- 1) Execute a COMMIT statement
-- 2) Connecting to the database server within each session
-- 3) Executing ANY DDL statement
-- 4) SET TRANSACTION (Not covered in this course)

-- demonstrate the DDL statement autocommit mystery
COMMIT;

INSERT INTO w11Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w11Accounts SET balance = balance - 1000 WHERE accountID = 2;


INSERT INTO w11Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w11Accounts SET balance = balance + 1000 WHERE accountID = 1;

ROLLBACK;  -- goes back to the START of the CURRENT transaction.

SELECT * FROM w11Transactions;
SELECT * FROM w11Accounts;

DELETE FROM w11Transactions;
ROLLBACK;
-- current transaction is currrently EMPTY
INSERT INTO w11Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w11Accounts SET balance = balance - 1000 WHERE accountID = 2;

CREATE VIEW vwTemp AS
    SELECT * FROM w11Transactions;
-- ---  new transaction after the DDL statement
-- so rollback goes back to HERE
INSERT INTO w11Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w11Accounts SET balance = balance + 1000 WHERE accountID = 1;

SELECT * FROM w11Transactions;
SELECT * FROM w11Accounts;

ROLLBACK;

-- we have the ability to set savepoints with a transaction
-- New transaction
COMMIT;

-- withdrawal
INSERT INTO w11Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w11Accounts SET balance = balance - 1000 WHERE accountID = 2;

SAVEPOINT pointA;

-- deposit
INSERT INTO w11Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w11Accounts SET balance = balance + 1000 WHERE accountID = 1;

ROLLBACK TO pointA;
ROLLBACK;


-- proving DDL autocommit....

DELETE FROM w11Transactions;
UPDATE w11Accounts SET balance = 2500;
COMMIT;

SELECT * FROM w11Transactions;
SELECT * FROM w11Accounts;

-- We have a NEW transaction
INSERT INTO w11Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w11Accounts SET balance = balance - 1000 WHERE accountID = 2;

CREATE VIEW vwTemp AS
    SELECT * FROM w11Transactions;
-- ---  new transaction after the DDL statement
-- so rollback goes back to HERE
INSERT INTO w11Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w11Accounts SET balance = balance + 1000 WHERE accountID = 1;

-- Any current transaction is AUTO rolled back upon a lost connection to the server

